# -*- coding: utf-8 -*-
"""Case_Study_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1olTbQzxqK3J_5sf4nCikzavAdCbxkhzs
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

url='https://drive.google.com/file/d/1fFRBGLqL6ZN3wSIIyFRCUaegY0abAlqm/view?usp=sharing'
url='https://drive.google.com/uc?id=' + url.split('/')[-2]
df = pd.read_csv(url)

df.columns=['ID','Email','Net_Revenue','Year']

df.duplicated().value_counts() #Checking for duplicates if any

df=df.drop('ID',axis=1) #Since ID is of no use as we already have index

df.isnull().sum() #Checking for any null values

"""Since Data is Cleaned and there are no null values, we can move forward.

# For each year we need the following information:

•	Total revenue for the current year

•	New Customer Revenue e.g. new customers not present in previous year only

•	Existing Customer Growth. To calculate this, use the Revenue of existing customers for current year –(minus) Revenue of existing customers from the previous year

•	Revenue lost from attrition

•	Existing Customer Revenue Current Year

•	Existing Customer Revenue Prior Year

•	Total Customers Current Year

•	Total Customers Previous Year

•	New Customers

•	Lost Customers
"""

df.Year.unique()

Years=df.groupby(df.Year) #Grouping Each data by different years i.e. 2015, 2016, 2017

Data_of_2015=Years.get_group(2015) #Creating each group for each year

Data_of_2016=Years.get_group(2016)

Data_of_2017=Years.get_group(2017)

"""# Total Revenue of Current Year"""

Revenue_of_2015=Data_of_2015['Net_Revenue'].sum()
print(f"Total Revenue of 2015 is {Revenue_of_2015.round(2)}")

Revenue_of_2016=Data_of_2016['Net_Revenue'].sum()
print(f"Total Revenue of 2016 is {Revenue_of_2016.round(2)}")

Revenue_of_2017=Data_of_2017['Net_Revenue'].sum()
print(f"Total Revenue of 2017 is {Revenue_of_2017.round(2)}")

Revenue=[
    (2015,Revenue_of_2015),
    (2016,Revenue_of_2016),
    (2017,Revenue_of_2017)
]
Total_Revenue=pd.DataFrame(Revenue,columns=['Year','TotalRevenue'])
Total_Revenue

plt.figure(figsize=(8,6))
sns.barplot(data=Total_Revenue,x='Year',y='TotalRevenue')
plt.title("Total Revenue by each year")
plt.xlabel("Years")
plt.ylabel("Total Revenue(in crores)")

Total_Revenue

"""# New Customer Revenue e.g. new customers not present in previous year only

Logic:- Now, we need to calculate New customers Revenue for each year. 

Since, 2015 is the initial year and all the email_ID's are unique, it would be same as Total revenue of 2015.

For 2016, we need to consider only those records which are new in terms of email ID(i.e. New Customers). So, isin operator is used to check the email ID's of 2016 with 2015 and find out new customers of 2016 and it's total revenue.

For 2017, we need to consider only those records which are new in terms of email ID(i.e. New Customers). So, isin operator is used to check the email ID's of 2017 with 2016 and 2015 and find out new customers of 2017 and then sum up the revenue to find out Total revenue of new customers.
"""

Revenue_of_2015=Data_of_2015['Net_Revenue'].sum()
print(f"Total Revenue of New Customers of 2015 is {Revenue_of_2015.round(2)}")

New_Customers_of_2016 = Data_of_2016[Data_of_2016.Email.isin(Data_of_2015.Email) == False] #Using Minus Intersection to get unique Email IDs for year 2016
New_Customers_of_2016

d=Data_of_2015.append(Data_of_2016)
d['Email'].nunique()-Data_of_2015['Email'].nunique() #Crosschecking the new customers by merging data of both the years and checking it with the nunique values

New_Customer_Revenue_of_2016=New_Customers_of_2016['Net_Revenue'].sum()
print(f"Total Revenue of New Customers of 2016 is {New_Customer_Revenue_of_2016.round(2)}")

New_Customers_of_2017 = Data_of_2017[Data_of_2017.Email.isin(Data_of_2015.Email) == False] #Using Minus Intersection to get unique Email IDs for year 2015
New_Customers_of_2017 = Data_of_2017[Data_of_2017.Email.isin(Data_of_2016.Email) == False] #Using Minus Intersection to get unique Email IDs for year 2016
New_Customer_Revenue_of_2017=New_Customers_of_2017.Net_Revenue.sum()
print(f"Total Revenue of New Customers of 2017 is {New_Customer_Revenue_of_2017.round(2)}")

New_Customer_Revenue_of_2015=Data_of_2015['Net_Revenue'].sum()
print(f"Total Revenue of New Customers 2015 is {New_Customer_Revenue_of_2015.round(2)}")

New_Customer_Revenue_of_2016=New_Customers_of_2016['Net_Revenue'].sum()
print(f"Total Revenue of New Customers of 2016 is {New_Customer_Revenue_of_2016.round(2)}")

New_Customer_Revenue_of_2017=New_Customers_of_2017['Net_Revenue'].sum()
print(f"Total Revenue of New Customers of 2017 is {New_Customer_Revenue_of_2017.round(2)}")

New_Customer_Revenue=[
    (2015,New_Customer_Revenue_of_2015),
    (2016,New_Customer_Revenue_of_2016),
    (2017,New_Customer_Revenue_of_2017)
]
New_Customer_Total_Revenue=pd.DataFrame(New_Customer_Revenue,columns=['Year','Total_Revenue_of_new_customers']) #Here, we are considering 2015 as the starting year where all the customers are considered as new customers
New_Customer_Total_Revenue

plt.figure(figsize=(8,6))
sns.barplot(data=New_Customer_Total_Revenue,x='Year',y='TotalRevenue_of_new_customers')
plt.title("Total Revenue by each year for new customers")
plt.xlabel("Years")
plt.ylabel("Total Revenue")

"""#	Existing Customer Growth. To calculate this, use the Revenue of existing customers for current year –(minus) Revenue of existing customers from the previous year"""

Existing_Customers_of_2016 = Data_of_2016[Data_of_2016.Email.isin(Data_of_2015.Email) == True]
Existing_Customers_of_2016_previous_year = Data_of_2015[Data_of_2015.Email.isin(Data_of_2016.Email) == True]

Existing_Customers_of_2017 = Data_of_2017[Data_of_2017.Email.isin(Data_of_2016.Email) == True] #Using Minus Intersection to get existing Email IDs for year 2016
Existing_Customers_of_2017_previous_year = Data_of_2016[Data_of_2016.Email.isin(Data_of_2017.Email) == True]

Existing_Customers_of_2017.Net_Revenue.sum()

Existing_Customers_of_2016.Net_Revenue.sum()

Customer_Growth_from_2015_to_2016=Existing_Customers_of_2016.Net_Revenue.sum()-Existing_Customers_of_2016_previous_year.Net_Revenue.sum()

Customer_Growth_from_2015_to_2016

Customer_Growth_from_2016_to_2017=Existing_Customers_of_2017.Net_Revenue.sum()-Existing_Customers_of_2017_previous_year.Net_Revenue.sum()

Customer_Growth_from_2016_to_2017

"""# Revenue lost from attrition"""

Lost_Customers_of_2016 = Data_of_2015[Data_of_2015.Email.isin(Data_of_2016.Email) == False]

Lost_Customers_of_2017 = Data_of_2016[Data_of_2016.Email.isin(Data_of_2017.Email) == False]

Revenue_Lost= Lost_Customers_of_2016.Net_Revenue.sum() + Lost_Customers_of_2017.Net_Revenue.sum()

print(f' Total Revenue Lost from attrition is {Revenue_Lost.round(2)}')

"""#	Existing Customer Revenue Current Year and Prior Year"""

print(f' Total Revenue of Existing Customers in 2015 is 0')#As er don't have data of previous year's and this year's to get the existing customers

Existing_Customers_of_2016_Revenue=Existing_Customers_of_2016.Net_Revenue.sum()
print(f' Total Revenue of Existing Customers in 2016 is {Existing_Customers_of_2016_Revenue.round(2)}')

Existing_Customers_of_2017_Revenue=Existing_Customers_of_2017.Net_Revenue.sum()
print(f' Total Revenue of Existing Customers in 2017 is {Existing_Customers_of_2017_Revenue.round(2)}')

"""# Total Customers Current Year and Total Customers Previous Year

"""

Total_Customers_in_2015=Data_of_2015.Email.nunique()
print(f' Total Unique Customers in 2015 were {Total_Customers_in_2015}')

Total_Customers_in_2016=pd.concat([Data_of_2015,Data_of_2016])
Total_Customers_in_2016=Total_Customers_in_2016.Email.nunique()
print(f' Total Unique Customers in 2015 and 2016 were {Total_Customers_in_2016}')
print(f' Total Customers in 2016 were {Data_of_2016.Email.nunique()}')

Total_Customers_in_2017=df.Email.nunique()
print(f' Total Unique Customers in 2015, 2016 and 2017 were {Total_Customers_in_2017}')
print(f' Total Customers in 2017 were {Data_of_2017.Email.nunique()}')

"""# New Customers and Lost Cutomers"""

print(f' New Customers in 2015 were {Data_of_2015.Email.nunique()}')
print(f' New Customers in 2016 were {New_Customers_of_2016.Email.nunique()}')
print(f' New Customers in 2017 were {New_Customers_of_2017.Email.nunique()}')

New_Customer_Revenue_of_2017

Lost_Customers_of_2016

print(f' Lost Customers in 2016 were {Lost_Customers_of_2016.Email.nunique()}')
print(f' Lost Customers in 2017 were {Lost_Customers_of_2017.Email.nunique()}')

Final=[
    (2015,Revenue_of_2015,Total_Customers_in_2015,np.nan,np.nan,np.nan,np.nan,np.nan,np.nan),
    (2016,Revenue_of_2016,Data_of_2016.Email.nunique(),New_Customers_of_2016.Email.nunique(),New_Customer_Revenue_of_2016,Existing_Customers_of_2016.Email.nunique(),Existing_Customers_of_2016_Revenue,Lost_Customers_of_2016.Email.nunique(),Lost_Customers_of_2016.Net_Revenue.sum()),
    (2017,Revenue_of_2017,Data_of_2017.Email.nunique(),New_Customers_of_2017.Email.nunique(),New_Customer_Revenue_of_2017,Existing_Customers_of_2017.Email.nunique(),Existing_Customers_of_2017_Revenue,Lost_Customers_of_2017.Email.nunique(),Lost_Customers_of_2017.Net_Revenue.sum())
]
Final=pd.DataFrame(Final,columns=['Year','Total Revenue','Total Customers','New Customers','New Customers Revenue','Existing Customers','Existing Customers Revenue','Lost Customers','Lost Customers Revenue'])
Final